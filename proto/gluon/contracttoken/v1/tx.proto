syntax = "proto3";
package gluon.contracttoken.v1;

import "cosmos/bank/v1beta1/bank.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gluon/contracttoken/v1/params.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/gluon-zone/gluon/x/contracttoken/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // CreateToken
  rpc CreateToken(MsgCreateToken) returns (MsgCreateTokenResponse);
  // UpdateToken
  rpc UpdateToken(MsgUpdateToken) returns (MsgUpdateTokenResponse);
  // Mint
  rpc Mint(MsgMint) returns (MsgMintResponse);
  // Burn
  rpc Burn(MsgBurn) returns (MsgBurnResponse);
  // SetMetadata
  rpc SetMetadata(MsgSetMetadata) returns (MsgSetMetadataResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgCreateToken
message MsgCreateToken {
  option (cosmos.msg.v1.signer) = "contract_address";

  string contract_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bool before_send_hook_enabled = 2;
}

// MsgCreateTokenResponse is the return value of MsgCreateToken
// It returns the full string of the newly created token
message MsgCreateTokenResponse {
  string denom = 1;
}

// MsgUpdateToken
message MsgUpdateToken {
  option (cosmos.msg.v1.signer) = "contract_address";

  string contract_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bool before_send_hook_enabled = 2;
}

// MsgUpdateTokenResponse
message MsgUpdateTokenResponse {}

// MsgMint
message MsgMint {
  option (cosmos.msg.v1.signer) = "contract_address";

  string contract_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string amount = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (cosmos_proto.scalar) = "cosmos.Int"
  ];
  // If not provided, the minted tokens will be sent to the sender account.
  string recipient = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgMintResponse
message MsgMintResponse {}

// MsgBurn
message MsgBurn {
  option (cosmos.msg.v1.signer) = "contract_address";

  string contract_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string amount = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (cosmos_proto.scalar) = "cosmos.Int"
  ];
}

// MsgBurnResponse
message MsgBurnResponse {}

// MsgSetMetadata
// bank metadata is set on the contract token denom
message MsgSetMetadata {
  option (cosmos.msg.v1.signer) = "contract_address";

  string contract_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.bank.v1beta1.Metadata metadata = 2 [(gogoproto.nullable) = false];
}

// MsgSetMetadataResponse
message MsgSetMetadataResponse {}
